import React from "react";
import logo, { ReactComponent } from './logo.svg';
import './App.css';
import firebase from './firebase';

import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  useRouteMatch,
  useParams
} from "react-router-dom";

const db = firebase.firestore();

const curUser = {
  name: "",
  id: "",
  loggedIn: false,
}

var userProf = null

async function loginApp() {
  var provider = new firebase.auth.GoogleAuthProvider();
  userProf = await firebase.auth().signInWithPopup(provider);
  const user = {
    screenName: userProf.user.displayName,
    id: userProf.user.uid,
    image: userProf.user.photoURL,
  }
  curUser.id = user.id;
  curUser.name = user.screenName;
  curUser.loggedIn = true;
  document.getElementById("namespace").innerText = "Hi " + curUser.name;
  console.log(curUser.name);
  console.log(userProf.user);
  db.collection('users').doc(user.id).set(user);

};

async function logOut() {
  userProf = firebase.auth().signOut();
  document.getElementById("namespace").innerText = "succesfully logged out";
  curUser.id = "";
  curUser.name = "";
  curUser.loggedIn = false;
  console.log(userProf.user);
}

function sendMessage(subred, title, mes) {
  var loc = "Subs/" + subred + "/Posts";
  db.collection(loc).doc(title).set({ Message: mes, Upvotes: 0, posted: true });
}

export default function App() {
  return (
    <Router>
      <div>
        <h1 id="namespace"></h1>
        <button type="button" id="login" onClick={loginApp}>login</button>
        <button type="button" id="signout" onClick={logOut}>sign out</button>
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/about">About</Link>
          </li>
          <li>
            <Link to="/topics">Topics</Link>
          </li>
          <li>
            <Link to="/subreddits">subreddits</Link>
          </li>
        </ul>

        <Switch>
          <Route path="/about">
            <About />
          </Route>
          <Route path="/topics">
            <Topics />
          </Route>
          <Route path="/subreddits">
            <Subredditos />
          </Route>
          <Route path="/">
            <Home />
          </Route>
        </Switch>
      </div>
    </Router>
  );
}

function readDoc(sub, list) {
  var loc = "Subs/" + sub + "/Posts";
  db.collection(loc).get().then(function (querySnapshot) {
    querySnapshot.forEach(function (doc) {
      // doc.data() is never undefined for query doc snapshots
      var mess = doc.data().Message;
      var li = document.createElement("li");
      var upvote = document.createElement("button");
      upvote.addEventListener("click", function () {
        var upvot = doc.data().Upvotes + 1;
        db.collection(loc).doc(doc.id).set({ Message: mess, Upvotes: upvot, posted: true });
      });
      upvote.textContent = "Upvote";

      li.appendChild(document.createTextNode(doc.id + ": " + mess + ": upvotes = " + doc.data().Upvotes));
      document.getElementById(list).appendChild(li);
      document.getElementById(list).appendChild(upvote);

      console.log(doc);
      console.log(doc.data().Message);
    });
  });
}


function Subredditos() {
  let match = useRouteMatch();

  return (
    <div>
      <h2>Topics</h2>
      <ul>
        <li>
          <Link to={`${match.url}/Tech`}>Tech</Link>
        </li>
        <li>
          <Link to={`${match.url}/Art`}>Art</Link>
        </li>
      </ul>

      {/* The Topics page has its own <Switch> with more routes
          that build on the /topics URL path. You can think of the
          2nd <Route> here as an "index" page for all topics, or
          the page that is shown when no topic is selected */}
      <Switch>
        <Route path={`${match.path}/Tech`}>
          <SubsTech />
        </Route>
        <Route path={`${match.path}/Art`}>
          <SubsArt />
        </Route>
      </Switch>
    </div>
  );
}

function SubsTech() {
  readDoc("Tech", "listTech");
  return <div>

    <div>
      <ul id="listTech" style={{ color: "red" }, { marginLeft: 40 }}> </ul>
    </div>
    <div>
      <h3>Post Title</h3>
      <input type="text" id="titleInput" size="20" name="titleInput"></input>
      <br></br>
      <h3>Post Title</h3>
      <input type="text" id="messageInput" size="20" name="messageInput"></input>
      <br></br>
      <button type="button" id="submitPost" onClick={submitTech}>Submit</button>
    </div>

  </div>
}
function SubsArt() {
  readDoc("Art", "listArt");
  return <div>

    <div>
      <ul id="listArt" style={{ color: "red" }, { marginLeft: 40 }}> </ul>
    </div>
    <div>
      <h3>Post Title</h3>
      <input type="text" id="titleInput" size="20" name="titleInput"></input>
      <br></br>
      <h3>Post Content</h3>
      <input type="text" id="messageInput" size="20" name="messageInput"></input>
      <br></br>
      <button type="button" id="submitPost" onClick={submitArt}>Submit</button>
    </div>

  </div>
}

function submitTech() {
  if (curUser.loggedIn == true) {
    const message = document.getElementById("messageInput").value;
    const postTitle = document.getElementById("titleInput").value;

    sendMessage("Tech", postTitle, message);
  }
  else {
    alert("please log in first")
  }

}
function submitArt() {
  if (curUser.loggedIn == true) {
    const message = document.getElementById("messageInput").value;
    const postTitle = document.getElementById("titleInput").value;

    sendMessage("Art", postTitle, message);
  }
  else {
    alert("please log in first")
  }

}

function Home() {
  return <h2>Home</h2>;
}

function About() {
  return <h2>About</h2>;
}

function Topics() {
  let match = useRouteMatch();

  return (
    <div>
      <h2>Topics</h2>

      <ul>
        <li>
          <Link to={`${match.url}/components`}>Components</Link>
        </li>
        <li>
          <Link to={`${match.url}/props-v-state`}>
            Props v. State
          </Link>
        </li>
      </ul>

      {/* The Topics page has its own <Switch> with more routes
          that build on the /topics URL path. You can think of the
          2nd <Route> here as an "index" page for all topics, or
          the page that is shown when no topic is selected */}
      <Switch>
        <Route path={`${match.path}/:topicId`}>
          <Topic />
        </Route>
        <Route path={match.path}>
          <h3>Please select a topic.</h3>
        </Route>
      </Switch>
    </div>
  );
}

function Topic() {
  let { topicId } = useParams();
  return <h3>Requested topic ID: {topicId}</h3>;
}